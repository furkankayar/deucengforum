{"remainingRequest":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alu/Desktop/DEUCENGFORUM/APP/src/views/Post.vue?vue&type=template&id=66b2084c&","dependencies":[{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/src/views/Post.vue","mtime":1579815162763},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}