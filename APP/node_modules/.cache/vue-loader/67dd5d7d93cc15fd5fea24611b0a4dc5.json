{"remainingRequest":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alu/Desktop/DEUCENGFORUM/APP/src/views/Post.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/src/views/Post.vue","mtime":1581022191210},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alu/Desktop/DEUCENGFORUM/APP/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnByb2ZpbGVfaW1hZ2UgewogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIHdpZHRoOiAxMDBweDsKICBoZWlnaHQ6IDEwMHB4Owp9Cg=="},{"version":3,"sources":["Post.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiRA;AACA;AACA;AACA;AACA;AACA","file":"Post.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-2\"/>\n      <div class=\"col-md-8\">\n        <div class=\"question-card card mb-4\">\n          <div class=\"card-header forum-card-img-30 d-flex justify-content-between\">\n            <p class=\"pt-2 mb-0\">\n              <img :src=\"this.user_profile_image\" alt=\"\" class=\"mr-4 z-depth-2 profile_image\">\n              <strong><a :href=\"this.user_id !== '' ? '/user/' + this.user_id : '#'\">{{ this.username }}</a></strong>\n              {{ printDate(this.date) }}\n            </p>\n            <div>\n              <a v-on:click=\"votePost('1')\" type=\"button\" class=\"btn btn-outline-dark-green btn-sm px-2 waves-effect show_login\">\n                <span class=\"value\">{{ this.positive_vote }}</span>\n                <i class=\"far fa-thumbs-up ml-1\"></i>\n              </a>\n              <a v-on:click=\"votePost('-1')\" type=\"button\" class=\"btn btn-outline-danger btn-sm px-2 waves-effect show_login\">\n                <span class=\"value\">{{ this.negative_vote }}</span>\n                <i class=\"far fa-thumbs-down ml-1\"></i>\n              </a>\n            </div>\n          </div>\n          <!--Card content-->\n          <div class=\"card-body\">\n            {{ this.content }}\n            <hr>\n            <!-- Comments -->\n            <div class=\"comment-card ml-5\">                                                                                                                                                                                                  <!-- Single comment -->\n              <small v-for=\"(comment, i) in comments\" v-bind:key=\"i\" class=\"comment-item text-muted\">\n                <p class=\"mb-2\">\n                  <strong><a :href=\"comment.user_id ? '/user/' + comment.user_id : '#'\">{{ comment.username ? comment.username : 'Anonymous' }}</a></strong>\n                  {{ printDate(comment)}}\n                </p>\n                <p>{{ comment.content }}</p>\n                <hr>\n              </small>\n              <div>\n                <div class=\"px-1 mt-4\">\n\n                <!-- Comment -->\n                <div class=\"form-group\">\n                  <label for=\"replyFormComment\">Your comment</label>\n                  <textarea v-model=\"commentText\"\n                            v-on:input=\"commentTyped\"\n                            v-on:focusin=\"counterVisible = true\"\n                            v-on:focusout=\"counterVisible = false \"\n                            class=\"form-control\"\n                            id=\"replyFormComment\"\n                            rows=\"5\"\n                            maxlength=\"350\">\n                  </textarea>\n                  <small v-if=\"counterVisible\" class=\"text-muted mb-2 float-right\">{{ this.commentText.trim().length + '/350' }}</small>\n                  <br/>\n                </div>\n                <div class=\"text-center\">\n                  <mdb-btn :disabled=\"this.disableButton || this.disableAll\" v-on:click=\"commentAuthenticated()\" v-if=\"isAuthenticated\" gradient=\"blue\" size=\"md\">Comment</mdb-btn>\n                  <mdb-btn :disabled=\"this.disableButton || this.disableAll\" v-on:click=\"commentAnonymous()\" gradient=\"purple\" size=\"md\">Comment Anonymous</mdb-btn>\n                </div>\n\n              </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-2\"/>\n    </div>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\n// import HelloWorld from '@/components/HelloWorld.vue'\n// import NavbarPage from '@/components/NavbarPage.vue'\nimport { mdbBtn } from 'mdbvue';\nimport api from '../api';\n\nexport default {\n  name: 'post',\n  components: {\n    mdbBtn,\n  },\n  data () {\n    return {\n      post_id: '',\n      isAuthenticated: false,\n      user_id: '',\n      user_profile_image: '',\n      username: '',\n      content: '',\n      date: {},\n      positive_vote: '',\n      negative_vote: '',\n      comments: [],\n      commentText: '',\n      commentError: '',\n      disableButton: true,\n      disableAll: false,\n      counterVisible: false\n    }\n  },\n  mounted () {\n    let data\n    let id = this.$route.params.id\n    if (this.$route.params.data !== undefined || this.$route.params.data !== null) {\n      data = this.$route.params.data\n    }\n    this.post_id = id\n    this.user_id = data.user_id ? data.user_id : ''\n    this.user_profile_image = data.profile_image ? data.profile_image : ''\n    this.username = data.username ? data.username : ''\n    this.content = data.content ? data.content : ''\n    this.date.published_days_ago = data.published_days_ago ? data.published_days_ago : 0\n    this.date.published_hours_ago = data.published_hours_ago ? data.published_hours_ago : 0\n    this.date.published_minutes_ago = data.published_minutes_ago ? data.published_minutes_ago : 0\n    this.date.published_seconds_ago = data.published_seconds_ago ? data.published_seconds_ago : 0\n    this.positive_vote = data.positive_vote ? data.positive_vote : ''\n    this.negative_vote = data.negative_vote ? data.negative_vote : ''\n\n    if (id !== undefined || id !== null) {\n\n      api.get_comments_of_post({\n        postId: id\n      })\n        .then(res => {\n          if (res.data.code === 200 && res.data.error === false) {\n            this.comments = res.data.body\n          }\n          else {\n            this.comments = []\n          }\n        })\n        .catch(err => {\n          if (err) {\n            this.comments = []\n          }\n        })\n    }\n\n    api.check_authentication({\n    })\n      .then(res => {\n        if (res.data.error === false){\n          this.isAuthenticated = true\n        }\n        else {\n          this.isAuthenticated = false\n        }\n      })\n      .catch(err => {\n        if (err) {\n          this.isAuthenticated = false\n        }\n      })\n\n    api.view_post({\n      postId: id\n    })\n      .then(res => {\n        if (res){\n          console.log('Post view confirmed')\n        }\n      })\n      .catch(err => {\n        if (err) {\n          console.log('Unauthorized')\n        }\n      })\n  },\n  methods: {\n    printDate (item) {\n      if (item.published_days_ago !== 0) {\n        return item.published_days_ago + ' day' + (item.published_days_ago > 1 ? 's' : '') + ' ago'\n      }\n      else if (item.published_hours_ago !== 0) {\n        return item.published_hours_ago + ' hour' + (item.published_hours_ago > 1 ? 's' : '') + ' ago'\n      }\n      else if (item.published_minutes_ago !== 0) {\n        return item.published_minutes_ago + ' minute' + (item.published_minutes_ago > 1 ? 's' : '') + ' ago'\n      }\n      else {\n        return item.published_seconds_ago + ' second' + (item.published_seconds_ago > 1 ? 's' : '') + ' ago'\n      }\n    },\n    commentTyped () {\n\n      if (this.commentText.trim().length > 0 && this.commentText.trim().length <= 350) {\n        this.disableButton = false\n      }\n      else {\n        this.disableButton = true\n      }\n    },\n    commentAnonymous () {\n      this.disableAll = true\n      api.new_comment_anonymous({\n        comment: this.commentText.trim(),\n        postId: this.post_id\n      })\n        .then(res => {\n          if (res.data.error === false) {\n            this.$router.go(0)\n          }\n          else{\n            console.log('Error occured while comment being created')\n          }\n          this.disableAll = false\n        })\n        .catch(err => {\n          if (err) {\n            console.log('Error occured while comment being created')\n          }\n          this.disableAll = false\n        })\n    },\n    commentAuthenticated () {\n      this.disableAll = true\n      api.new_comment_authenticated({\n        comment: this.commentText.trim(),\n        postId: this.post_id\n      })\n        .then(res => {\n          if (res.data.error === false) {\n            this.$router.go(0)\n          }\n          else{\n            console.log('Error occured while comment being created')\n          }\n          this.disableAll = false\n        })\n        .catch(err => {\n          if (err) {\n            console.log('Error occured while comment being created')\n          }\n          this.disableAll = false\n        })\n    },\n    votePost (value) {\n      api.vote_post({\n        vote: value,\n        postId: this.post_id\n      })\n        .then(res => {\n          if (res.data.error === false) {\n            api.get_post({\n              postId: this.post_id\n            })\n              .then(res => {\n                if (res.data.error === false) {\n                  this.positive_vote = res.data.body.positive_vote\n                  this.negative_vote = res.data.body.negative_vote\n                }\n              })\n              .catch(err => {\n                if (err) {\n                  console.log('Error')\n                }\n              })\n          }\n        })\n        .catch(err => {\n          if (err) {\n            this.$root.$emit('loginRequest')\n          }\n        })\n    }\n  }\n}\n</script>\n\n<style>\n.profile_image {\n  vertical-align: middle;\n  border-radius: 50%;\n  width: 100px;\n  height: 100px;\n}\n</style>\n"]}]}